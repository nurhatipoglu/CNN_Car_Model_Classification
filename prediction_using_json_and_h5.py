# -*- coding: utf-8 -*-
"""use_weight_and_json.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13AqTe_eqiQnqcX5ajs-gjsrK5eVywd-s
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

import cv2
import numpy as np
from keras.models import model_from_json
from keras.preprocessing import image
import tkinter
import random
from matplotlib import pyplot as plt


model = model_from_json(open("/gdrive/My Drive/YSA_Proje/car_model_checkpoint.json", "r").read())  
model.load_weights('/gdrive/My Drive/YSA_Proje/car_model_checkpoint.h5')

from keras.preprocessing import image
def load_image(img_path, show=False):

    img = image.load_img(img_path, target_size=(90, 150))
    img_tensor = image.img_to_array(img)                    # (height, width, channels)
    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)
    img_tensor /= 255.                                      # imshow expects values in the range [0, 1]

    if show:
        plt.imshow(img_tensor[0])                           
        plt.axis('off')
        plt.show()

    return img_tensor



#eğitiilmiş model üzerinden predict işlemi
models_name = ['acura', 'audi', 'bmw', 'chevrolet', 'fiat', 'ford', 'honda', 'hyundai', 'kia', 'toyota']
detail = ['mdx', 'a3', 'bmw6', 'sonic', '500', 'fiesta', 'civic', 'accent', 'rio', 'corolla']
models_n = np.arange(251,274)
my_input = [] 
j=0
for models in models_name:
    print(models)
    for model_n in models_n:            
        im_path =  '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/{}/{}_pre_{}.jpg'.format(models,detail[j],model_n)
        new_image = load_image(im_path)
        pred = model.predict(new_image)
        my_input.extend(pred) 
        print(pred)
    j=j+1
    print('\n')

import pandas as pd
#output = np.where(output <= 0.0009, 0, output)
df = pd.DataFrame(my_input)

def highlight_max(data, color='yellow'):
    '''
    highlight the maximum in a Series or DataFrame
    '''
    attr = 'background-color: {}'.format(color)
    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1
        is_max = data == data.max()
        return [attr if v else '' for v in is_max]
    else:  # from .apply(axis=None)
        is_max = data == data.max().max()
        return pd.DataFrame(np.where(is_max, attr, ''),
                            index=data.index, columns=data.columns) 

df.style.apply(highlight_max, axis = 1)

df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/acura/mdx_pre_266.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/audi/a3_pre_312.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/bmw/bmw6_pre_406.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/chevrolet/sonic_pre_271.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/fiat/500_pre_453.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/ford/fiesta_pre_364.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/honda/civic_pre_441.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/hyundai/accent_pre_5.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/kia/rio_pre_251.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/toyota/corolla_pre_492.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)