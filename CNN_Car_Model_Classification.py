# -*- coding: utf-8 -*-
"""deneme14_CNN_Car_Model_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12enqVotdvJedEgIwhBdIdRcCgGwu6o-W
"""

# Commented out IPython magic to ensure Python compatibility.
from keras.models import Sequential, load_model
from keras.layers import Dense
from keras.layers import Dropout
from keras.layers import Flatten
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D, ZeroPadding2D
from keras.preprocessing.image import ImageDataGenerator

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

from IPython.display import SVG
from keras.utils.vis_utils import model_to_dot

import cv2
np.random.seed(5)

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/gdrive')
# %cd /gdrive

#train sınıfımızda bulunan verilerin 1. , 100. ve 200. resmini göstermek.
model_name = ['acura', 'audi', 'bmw', 'chevrolet', 'fiat', 'ford', 'honda', 'hyundai', 'kia', 'toyota']
detail = ['mdx', 'a3', 'bmw6', 'sonic', '500', 'fiesta', 'civic', 'accent', 'rio', 'corolla']
num = [1, 100, 200]
i = 1
j=0
path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_radi_train200_test50_4bit_3class/train200'
plt.figure(figsize = (10,10))
for m in model_name:
    for n in num:
        img = cv2.imread(path + '/{}_train200/{}_pre_{}.jpg'.format(m,detail[j],n))
        plt.subplot(3,3,i)
        plt.imshow(img, cmap = plt.cm.gray)
        plt.title('{}{}'.format(m, n))
        plt.show()
    j=j+1

#train ve validation verilerinin hazırlanması.
train_datagen = ImageDataGenerator(rescale = 1./255)
train_generator = train_datagen.flow_from_directory(
    directory="/gdrive/My Drive/YSA_Proje/deneme_car_image/image_radi_train200_test50_4bit_3class/train200",
    target_size = (90,150),
    batch_size = 32,
    class_mode = "categorical",
    shuffle = True) 

test_datagen = ImageDataGenerator(rescale = 1./255)
test_generator = test_datagen.flow_from_directory(
    '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_radi_train200_test50_4bit_3class/test50',
    target_size = (90,150), # 120, 265 original
    batch_size = 8,
    class_mode = 'categorical')

#modelin ve model katmanlarının oluşturulması
model = Sequential()

model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu', input_shape = (90, 150, 3)))
model.add(Conv2D(32, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(Conv2D(64, (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size = (2,2)))
model.add(Dropout(0.25))


model.add(Flatten())
model.add(Dense(1000, activation = 'relu'))
model.add(Dense(100, activation = 'relu'))
model.add(Dense(10, activation = 'softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer = 'sgd', metrics = ['accuracy'])

#eğitim
step = 60
epoch = 75

hist = model.fit_generator(
    train_generator,
    steps_per_epoch = step,
    epochs = epoch,
    validation_data = test_generator)

fig, loss_ax = plt.subplots(figsize = (8,8))

acc_ax = loss_ax.twinx()

loss_ax.plot(hist.history['loss'], 'y', label='train loss')
loss_ax.plot(hist.history['val_loss'], 'r', label='val loss')

acc_ax.plot(hist.history['accuracy'], 'b', label='train acc')
acc_ax.plot(hist.history['val_accuracy'], 'g', label='val acc')

loss_ax.set_xlabel('epoch', fontsize = 20)
loss_ax.set_ylabel('loss', fontsize = 20)
acc_ax.set_ylabel('accuray', fontsize = 20)

loss_ax.legend(loc='upper left')
acc_ax.legend(loc='lower left')

plt.title('Model HIstory', fontsize = 30)
plt.show()

print('-- Evaluation --')
scores = model.evaluate_generator(test_generator, steps = 3)
print('%s : %0.2f%%' %(model.metrics_names[1], scores[1]*100))

# Commented out IPython magic to ensure Python compatibility.
from matplotlib import pyplot as plt
# %matplotlib inline
plt.figure(figsize=(14,3))
plt.subplot(1, 2, 1)
plt.suptitle('Eğitim', fontsize=10)
plt.ylabel('Loss', fontsize=16)
plt.plot(hist.history['loss'], color ='r', label='Training Loss')
plt.plot(hist.history['val_loss'], color ='b', label='Validation Loss')
plt.legend(loc='upper right')


plt.subplot(1, 2, 2)
plt.ylabel('Accuracy', fontsize=16)
plt.plot(hist.history['accuracy'], color ='g', label='Training Accuracy')
plt.plot(hist.history['val_accuracy'], color ='m', label='Validation Accuracy')
plt.legend(loc='lower right')

plt.show()

from keras.preprocessing import image
def load_image(img_path, show=False):
    img = image.load_img(img_path, target_size=(90, 150))
    img_tensor = image.img_to_array(img)                    # (height, width, channels)
    img_tensor = np.expand_dims(img_tensor, axis=0)         # (1, height, width, channels), add a dimension because the model expects this shape: (batch_size, height, width, channels)
    img_tensor /= 255.                                      # imshow expects values in the range [0, 1]

    if show:
        plt.imshow(img_tensor[0])                           
        plt.axis('off')
        plt.show()

    return img_tensor

#eğitiilmiş model üzerinden predict işlemi
models_name = ['acura', 'audi', 'bmw', 'chevrolet', 'fiat', 'ford', 'honda', 'hyundai', 'kia', 'toyota']
models_n = np.arange(251,274)
my_input = [] 
j=0
for models in models_name:
    print(models)
    for model_n in models_n:            
        im_path =  '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/{}/{}_pre_{}.jpg'.format(models,detail[j],model_n)
        new_image = load_image(im_path)
        pred = model.predict(new_image)
        my_input.extend(pred) 
        print(pred)
    j=j+1
    print('\n')
# print(my_input)

import pandas as pd
#output = np.where(output <= 0.0009, 0, output)
df = pd.DataFrame(my_input)

def highlight_max(data, color='yellow'):
    '''
    highlight the maximum in a Series or DataFrame
    '''
    attr = 'background-color: {}'.format(color)
    if data.ndim == 1:  # Series from .apply(axis=0) or axis=1
        is_max = data == data.max()
        return [attr if v else '' for v in is_max]
    else:  # from .apply(axis=None)
        is_max = data == data.max().max()
        return pd.DataFrame(np.where(is_max, attr, ''),
                            index=data.index, columns=data.columns) 

df.style.apply(highlight_max, axis = 1)

df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/bmw/bmw6_pre_406.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/acura/mdx_pre_266.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/audi/a3_pre_312.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/chevrolet/sonic_pre_271.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/fiat/500_pre_453.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/ford/fiesta_pre_364.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/honda/civic_pre_444.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/hyundai/accent_pre_269.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/kia/rio_pre_251.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)

im_path = '/gdrive/My Drive/YSA_Proje/deneme_car_image/image_prediction_original_4bit/toyota/corolla_pre_412.jpg'                                           # Put image you want to predict
new_image = load_image(im_path)
pred = model.predict(new_image)
print(pred)
import cv2
img = cv2.imread(im_path)
plt.imshow(img, cmap = plt.get_cmap('gray'))

import pandas as pd
df = pd.DataFrame(pred)
df.style.apply(highlight_max, axis = 1)
df = df.reindex(df.idxmax(axis = 1).sort_values().index)
df = df.reset_index(drop = True)
df.style.apply(highlight_max, axis = 1)